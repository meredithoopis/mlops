name: Airflow CI/CD on Self-Hosted Runner

on:
  push:
    branches:
      - main #chọn nhanh bị trigger 

env:
  # THAY THẾ BẰNG TÊN IMAGE VÀ DOCKER COMPOSE FILE CỦA BẠN
  IMAGE_NAME: elliana2811/car_detection #thay tên image trên docker hub 
  DOCKER_COMPOSE_FILE: ./data_pipeline/flow/docker-compose.prod.yml # Thay tên file docker-compose trong repo

jobs:
  build-and-push-image:
    name: Build and Push Airflow Docker Image
    runs-on: ubuntu-latest #chạy trên môi trường git
    outputs:
      image_tag_sha: ${{ steps.meta.outputs.version }} 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # Cân nhắc nâng cấp lên v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2 # Cân nhắc nâng cấp lên v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} 
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,suffix=,format=short 
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v6
        with:
          context: ./data_pipeline/flow 
          file: ./data_pipeline/flow/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha 
          cache-to: type=gha,mode=max 

  deploy-airflow:
    name: Deploy Airflow Services
    runs-on: self-hosted 
    needs: build-and-push-image 
    
    steps:
      - name: Checkout Repository (để có docker-compose.yaml)
        uses: actions/checkout@v4

      - name: Create or Update .env file with IMAGE_TAG
        # Step này sẽ tạo file .env từ secret (nếu có) VÀ thêm/cập nhật IMAGE_TAG từ build output.
        if: ${{ always() }} # Luôn chạy step này để xử lý cả trường hợp secret có hoặc không
        env:
          # Nội dung từ secret (có thể rỗng nếu secret không được đặt)
          ENV_CONTENT_FROM_SECRET: ${{ secrets.ENV_FILE_CONTENT }}
          # Tag SHA từ output của job 'build-and-push-image'
          BUILT_IMAGE_TAG: ${{ needs.build-and-push-image.outputs.image_tag_sha }}
        run: |
          $envFilePath = "./data_pipeline/flow/.env"
          $imageTagName = "IMAGE_TAG"
          $imageTagValue = $env:BUILT_IMAGE_TAG 

          if (-not $imageTagValue) {
            Write-Warning "WARNING: BUILT_IMAGE_TAG is empty. IMAGE_TAG will not be set dynamically in .env file."
            # Trong trường hợp này, nếu .env từ secret có IMAGE_TAG thì nó sẽ được giữ nguyên,
            # hoặc nếu không có thì IMAGE_TAG sẽ không được thêm vào.
            # Nếu bạn muốn mặc định là 'latest' trong trường hợp này, bạn có thể đặt:
            # $imageTagValue = "latest" 
          }

          # Lấy nội dung từ secret làm cơ sở
          $baseContent = $env:ENV_CONTENT_FROM_SECRET
          
          # Chuyển đổi nội dung cơ sở thành một mảng các dòng để dễ xử lý
          # Tách dòng bằng `n (newline), cũng có thể cần xử lý `r`n (CRLF)
          $lines = $baseContent -split "`r?`n"

          # Lọc bỏ dòng IMAGE_TAG hiện có (nếu có) từ nội dung secret
          $newLines = $lines | Where-Object { $_ -notmatch "^${imageTagName}=" }

          # Thêm dòng IMAGE_TAG mới với giá trị từ build (nếu $imageTagValue có giá trị)
          if ($imageTagValue) {
            $newLines += "${imageTagName}=${imageTagValue}"
          }
          
          # Tạo thư mục đích nếu chưa tồn tại
          $targetDir = Split-Path -Path $envFilePath
          if (-not (Test-Path $targetDir)) {
            New-Item -ItemType Directory -Force -Path $targetDir
            Write-Host "Created directory: $targetDir"
          }

          # Ghi lại toàn bộ nội dung đã cập nhật vào file .env
          # Sử dụng Set-Content để ghi đè toàn bộ file với mảng các dòng mới
          ($newLines -join "`n" + "`n") | Out-File -FilePath $envFilePath -Encoding utf8 -NoNewline
          Write-Host ".env file has been created/updated at $envFilePath. IMAGE_TAG set to '$imageTagValue' (if provided)."
        shell: powershell

      # Bước này để xác minh rằng file .env đã được tạo thành công
      - name: Verify .env file existence
        run: |
          $envFilePath = "./data_pipeline/flow/.env" # << ĐIỀU CHỈNH ĐƯỜNG DẪN
          if (-not (Test-Path $envFilePath -PathType Leaf)) { 
            Write-Error "ERROR: .env file was NOT found at '$($envFilePath)' (current directory: $(Get-Location))."
            Write-Host "Please check if the 'ENV_FILE_CONTENT' secret is correctly set and the previous step ran successfully."
            exit 1
          } else {
            Write-Host ".env file verified successfully at '$($envFilePath)'."
          }
        shell: powershell

      - name: Log in to Docker Hub (on self-hosted runner)
        uses: docker/login-action@v2 # Hoặc v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull specific SHA tagged image
        run: docker pull ${{ env.IMAGE_NAME }}:${{ needs.build-and-push-image.outputs.image_tag_sha }}
        shell: powershell

      - name: Restart Airflow services using Docker Compose
        run: |
          Write-Host "Restarting Airflow services with the new image..."
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d --remove-orphans airflow-webserver airflow-scheduler airflow-init
          Write-Host "Airflow services deployment attempted."
        shell: powershell